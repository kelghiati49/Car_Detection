from KalmanFilter import KalmanFilter
from ultralytics import YOLOv10
from paddleocr import PaddleOCR
import streamlit as st
import numpy as np
import tempfile
import base64
import cv2
import time
import os
import re


# Charger les mod√®les YOLO et PaddleOCR
model = YOLOv10("./best.pt")  # Remplacez par le chemin de votre mod√®le YOLO
ocr = PaddleOCR(use_angle_cls=True, use_gpu=False)

# Fonction OCR pour d√©tecter le texte sur une plaque
def paddle_ocr(frame, x1, y1, x2, y2):
    frame_cropped = frame[y1:y2, x1:x2]
    result = ocr.ocr(frame_cropped, det=False, rec=True, cls=False)
    text = ""
    for r in result:
        score = r[0][1]
        score = 0 if np.isnan(score) else int(score * 100)
        if score > 60:
            text = r[0][0]
    pattern = re.compile(r"[\W]")
    text = pattern.sub("", text).replace("O", "0").upper()
    return text

# Fonction principale de traitement vid√©o
def process_video(video_path, car_plate):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        st.error("Erreur lors de l'ouverture de la vid√©o.")
        return None

    # Obtenir les param√®tres de la vid√©o
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # Cr√©er un fichier temporaire pour la sortie vid√©o
    temp_output = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    output_path = temp_output.name

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

    # Initialiser le filtre de Kalman
    kalman = KalmanFilter()

    # Chronom√©trage
    start_time = time.time()

    # Traitement image par image
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        # V√©rifier si le temps √©coul√© d√©passe 100 secondes
        elapsed_time = time.time() - start_time
        if elapsed_time >= 100:
            st.warning("‚è≥ Temps limite atteint (100 sec), arr√™t du traitement.")
            break

        # D√©tection des plaques avec YOLO
        results = model.predict(frame, conf=0.45)

        for result in results:
            for box in result.boxes:
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                detected_plate = paddle_ocr(frame, x1, y1, x2, y2)

                # Comparaison avec la plaque recherch√©e
                def compare_plates(detected, target):
                    return detected[:3] == target[:3] and detected[-1] == target[-1]

                if compare_plates(detected_plate, car_plate):
                    # Dessiner un rectangle et afficher le texte
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(frame, detected_plate, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

                    # Suivi avec Kalman
                    if not kalman.is_initialized:
                        kalman.initialize((x1 + x2) / 2, (y1 + y2) / 2)
                    else:
                        kalman.correct((x1 + x2) / 2, (y1 + y2) / 2)

                    # Afficher la position pr√©vue par Kalman
                    predicted_x, predicted_y = kalman.predict()
                    cv2.circle(frame, (int(predicted_x), int(predicted_y)), 5, (255, 0, 0), -1)

        # Ajouter l'image modifi√©e √† la vid√©o de sortie
        out.write(frame)

    # Lib√©ration des ressources
    cap.release()
    out.release()

    return output_path

# Interface Streamlit
# ajout de l'image au background
def get_base64(file_path):
    with open(file_path, "rb") as file:
        data = base64.b64encode(file.read()).decode()
    return data
img_base64 = get_base64("car_1.jfif")  # Image de fond
page_bg_img = f"""
<style>
    .stApp {{
        background-image: url("data:image/png;base64,{img_base64}");
        background-size: cover;
        background-position: center;
      }}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)
st.markdown("# D√©tection de v√©hicules et reconnaissance de plaques")

st.write("D√©tection et suivi de plaques avec arr√™t automatique apr√®s 100 secondes.")

# Entr√©e utilisateur
car_plate = st.text_input("üîé Entrez la plaque recherch√©e :", "")
uploaded_video = st.file_uploader("üìÇ T√©l√©chargez une vid√©o :", type=["mp4", "avi", "mov"])

if uploaded_video:
    st.video(uploaded_video)

if uploaded_video and car_plate:
    # Sauvegarder la vid√©o temporairement
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_file:
        temp_file.write(uploaded_video.read())
        video_path = temp_file.name

    # Lancer le traitement
    st.write("üõ†Ô∏è Traitement en cours...")
    with st.spinner("Analyse de la vid√©o... ‚è≥"):
        output_video_path = process_video(video_path, car_plate)

    # Afficher le r√©sultat
    if output_video_path and os.path.exists(output_video_path):
        st.success("‚úÖ Analyse termin√©e ! Voici la vid√©o trait√©e :")
        with open(output_video_path, "rb") as video_file:
            video_bytes = video_file.read()
            st.video(video_bytes)
        st.download_button(
            label="üì• T√©l√©charger la vid√©o trait√©e",
            data=video_bytes,
            file_name="output_video.mp4",
            mime="video/mp4",
        )
    else:
        st.error("Erreur : La vid√©o trait√©e n'a pas √©t√© trouv√©e ou n'existe pas.")





